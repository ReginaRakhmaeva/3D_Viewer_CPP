// CONTROLLER.H - Контроллер MVC (тонкий слой)
//
// ЗАЧЕМ НУЖЕН:
// Реализует Controller в MVC паттерне - тонкий слой между Model и View.
// Координирует взаимодействие между пользовательским интерфейсом и бизнес-логикой.
// НЕ содержит бизнес-логики и UI кода, только логику взаимодействия.
//
// ЧТО СОДЕРЖИТ:
// - Controller класс (связывает Model и View) - центральный координатор
// - Методы для обработки действий пользователя (слоты)
// - Слоты для сигналов от View (загрузка файла, трансформации, настройки)
// - Методы для обновления View данными из Model
// - Обработка ошибок и передача их в View
// - Управление состоянием приложения
// - Координация между различными компонентами
//
// КАК РАБОТАЕТ:
// 1. Получает сигналы от View (пользовательские действия)
// 2. Вызывает соответствующие методы Model (бизнес-логика)
// 3. Получает результаты от Model
// 4. Обновляет View с новыми данными
// 5. Обрабатывает ошибки и показывает их пользователю
//
// СВЯЗИ MVC:
// - View -> Controller: сигналы (пользовательские действия)
// - Controller -> Model: вызовы методов (бизнес-операции)
// - Model -> Controller: результаты операций
// - Controller -> View: обновление данных и состояния
//
// ПРИНЦИПЫ MVC:
// - НИКАКОЙ бизнес-логики, только координация
// - НИКАКОГО UI кода, только логика взаимодействия
// - Тонкий слой между Model и View
// - Делегирование бизнес-логики в Model
// - Делегирование отображения в View
//
// Все в namespace s21

namespace s21 {
    class Controller {
        Model* model_;
        View* view_;
        
    public:
        void onLoadFile(const std::string& path);
        void onMoveModel(double x, double y, double z);
        void onRotateModel(double x, double y, double z);
        void onScaleModel(double x, double y, double z);
    };
}
