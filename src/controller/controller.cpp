// CONTROLLER.CPP - Реализация контроллера
//
// ЗАЧЕМ НУЖЕН:
// Реализует тонкий слой координации между Model и View. Обрабатывает
// пользовательские действия, делегирует бизнес-логику в Model и обновляет
// View с результатами. Строго следует принципам MVC.
//
// ЧТО РЕАЛИЗУЕТ:
// - Связывание сигналов View с слотами Controller (connectSignals)
// - Обработка загрузки файла модели (onLoadFile)
// - Обработка команд трансформации (onMove, onRotate, onScale)
// - Получение данных из Model и передача в View
// - Обработка ошибок и показ их пользователю
// - Координация между Model и View
// - Управление состоянием приложения
// - Обработка настроек отображения
//
// КАК РАБОТАЕТ:
// 1. Конструктор: создает Model и View, связывает сигналы
// 2. connectSignals(): связывает сигналы View с слотами Controller
// 3. Слоты обработки:
//    - onLoadFile(): вызывает model.LoadScene(), обновляет View
//    - onMove/onRotate/onScale(): вызывает model.Transform(), обновляет View
//    - onSettingsChanged(): обновляет настройки отображения
// 4. Методы обновления View:
//    - updateModelInfo(): передает информацию о mesh'е в View
//    - updateDisplay(): обновляет отображение 3D mesh'а
//    - showError(): показывает ошибки пользователю
//
// ОБРАБОТКА СОБЫТИЙ:
// - Загрузка файла: View -> Controller -> Model -> Controller -> View
// - Трансформация: View -> Controller -> Model -> Controller -> View
// - Настройки: View -> Controller -> Model -> Controller -> View
// - Ошибки: Model -> Controller -> View (показ сообщения)
//
// ПРИНЦИПЫ MVC:
// - НИКАКОЙ бизнес-логики, только делегирование
// - НИКАКОГО UI кода, только взаимодействие
// - Тонкий слой согласно принципам MVC
// - Делегирование всех операций в соответствующие компоненты
// - Минимальная логика, максимальная координация
