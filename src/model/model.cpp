// MODEL.CPP - Реализация основной модели
//
// ЗАЧЕМ НУЖЕН:
// Реализует Facade паттерн - предоставляет простой интерфейс для сложной подсистемы.
// Скрывает сложность работы с множественными классами от View и Controller.
//
// ЧТО РЕАЛИЗУЕТ:
// - Facade паттерн - упрощенный интерфейс для сложной подсистемы
// - Singleton для Model (если нужен глобальный доступ)
// - Загрузка OBJ файлов с парсингом вершин (v) и граней (f)
// - Аффинные преобразования через матрицы (используя s21_matrix+)
// - Undo/Redo через Command паттерн (стек команд)
// - Стратегии трансформации (Move, Rotate, Scale)
// - Нормализация модели при загрузке (центрирование, масштабирование)
// - Обработка ошибок и возврат FacadeOperationResult
// - Работа с Scene, Figure, Vertex, Edge классами
//
// КАК РАБОТАЕТ:
// 1. LoadScene() -> создает FileReader, парсит OBJ, создает Scene, нормализует
// 2. MoveScene() -> создает MoveStrategy, оборачивает в TransformCommand, выполняет
// 3. RotateScene() -> создает RotateStrategy, оборачивает в TransformCommand, выполняет  
// 4. ScaleScene() -> создает ScaleStrategy, оборачивает в TransformCommand, выполняет
// 5. DrawScene() -> делегирует отрисовку SceneDrawer'у
// 6. Undo() -> извлекает команду из стека, вызывает Undo()
// 7. Redo() -> извлекает команду из стека redo, выполняет снова
//
// ОПТИМИЗАЦИЯ:
// - Кэширование трансформированных вершин
// - Батчевая обработка для больших моделей (до 1M вершин)
// - Ленивая загрузка для больших файлов
