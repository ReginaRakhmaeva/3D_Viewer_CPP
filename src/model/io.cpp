// IO.CPP - Реализация работы с файлами
//
// ЗАЧЕМ НУЖЕН:
// Реализует загрузку и парсинг OBJ файлов. Обеспечивает корректную обработку
// различных форматов OBJ файлов, валидацию данных и нормализацию моделей.
//
// ЧТО РЕАЛИЗУЕТ:
// - FileReader::ReadMesh() - основной метод парсинга OBJ файлов
// - Парсинг строк "v x y z" для вершин (с поддержкой w-координаты)
// - Парсинг строк "f v1 v2 v3 ..." для граней (с поддержкой текстурных координат)
// - Нормализация модели по заданным параметрам (центрирование, масштабирование)
// - Создание Mesh с Vertex объектами
// - Обработка ошибок файлов (файл не найден, неправильный формат, поврежденные данные)
// - Возврат FacadeOperationResult с результатом операции
// - Валидация данных (проверка корректности координат, индексов, диапазонов)
//
// КАК РАБОТАЕТ:
// 1. Открытие файла, проверка существования и доступности
// 2. Чтение файла построчно, пропуск комментариев (#)
// 3. Парсинг вершин: "v 1.0 2.0 3.0" -> создание Vertex с 3DPoint
// 4. Парсинг граней: "f 1 2 3" -> создание Edge между Vertex'ами
// 5. Валидация: проверка индексов вершин, корректности координат
// 6. Нормализация: вычисление центра масс, масштабирование до единичного размера
// 7. Создание Mesh с вершинами и ребрами
// 8. Создание Mesh с фигурой
// 9. Возврат FacadeOperationResult (успех + Mesh или ошибка + сообщение)
//
// ОБРАБОТКА ОШИБОК:
// - Файл не найден -> "File not found: filename.obj"
// - Неправильный формат -> "Invalid OBJ format at line X"
// - Поврежденные данные -> "Corrupted data: invalid vertex index"
// - Пустой файл -> "File is empty or contains no geometry"
//
// ОПТИМИЗАЦИЯ:
// - Потоковое чтение для больших файлов
// - Предварительное выделение памяти по количеству строк
// - Кэширование нормализованных моделей
Mesh createMeshFromTempData() {
    Mesh mesh;
    
    // Создаем Vertex'ы из temp_vertices_
    for (const auto& point : temp_vertices_) {
        mesh.AddVertex(point);
    }
    
    // Создаем Edge'ы из temp_faces_
    createEdgesFromFaces(mesh);
    
    return mesh;
}