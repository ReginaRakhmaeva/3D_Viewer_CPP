// STRATEGIES.CPP - Реализация стратегий трансформации
//
// ЗАЧЕМ НУЖЕН:
// Реализует конкретные алгоритмы трансформации и команды. Обеспечивает
// корректное применение аффинных преобразований к 3D моделям с возможностью
// отмены операций.
//
// ЧТО РЕАЛИЗУЕТ:
// - MoveStrategy::Apply() - создание матрицы перемещения и применение к вершинам
// - RotateStrategy::Apply() - создание матриц поворота (по осям X,Y,Z) и применение
// - ScaleStrategy::Apply() - создание матрицы масштабирования и применение
// - TransformCommand::Execute() - выполнение команды с сохранением состояния
// - TransformCommand::Undo() - отмена команды и восстановление состояния
// - Использование TransformMatrixBuilder для создания матриц
// - Применение матриц к вершинам через TransformMatrix::TransformPoint()
// - Сохранение предыдущего состояния для undo (копия вершин)
//
// КАК РАБОТАЕТ:
// 1. MoveStrategy:
//    - Создает матрицу перемещения через TransformMatrixBuilder::CreateMoveMatrix()
//    - Применяет матрицу к каждой вершине: newPos = matrix * oldPos
// 2. RotateStrategy:
//    - Создает матрицы поворота по осям X, Y, Z
//    - Комбинирует матрицы: result = rotateX * rotateY * rotateZ
//    - Применяет к вершинам относительно центра модели
// 3. ScaleStrategy:
//    - Создает матрицу масштабирования
//    - Применяет к вершинам относительно центра модели
// 4. TransformCommand:
//    - Execute(): сохраняет копию вершин, применяет стратегию
//    - Undo(): восстанавливает сохраненные вершины
//
// ОПТИМИЗАЦИЯ:
// - Батчевая обработка вершин для больших моделей
// - Кэширование матриц трансформации
// - Минимизация копирования данных при undo
//
// ОБРАБОТКА ОШИБОК:
// - Проверка корректности параметров трансформации
// - Валидация матриц перед применением
// - Обработка исключений при операциях с памятью
