// STRATEGIES.H - Паттерны Strategy и Command для трансформаций
//
// ЗАЧЕМ НУЖЕН:
// Реализует два ключевых паттерна: Strategy для различных типов трансформаций
// и Command для undo/redo функциональности. Позволяет инкапсулировать операции
// трансформации и легко добавлять новые типы трансформаций.
//
// ЧТО СОДЕРЖИТ:
// - TransformStrategy абстрактный базовый класс (паттерн Strategy) - интерфейс для трансформаций
// - MoveStrategy класс (перемещение по осям X, Y, Z) - стратегия перемещения
// - RotateStrategy класс (поворот вокруг осей X, Y, Z) - стратегия поворота
// - ScaleStrategy класс (масштабирование по осям X, Y, Z) - стратегия масштабирования
// - Command абстрактный базовый класс (паттерн Command) - интерфейс для команд
// - TransformCommand класс (команда для применения трансформации) - конкретная команда
// - Undo/Redo функциональность через стеки команд
// - Все стратегии работают с TransformMatrix для аффинных преобразований
//
// КАК РАБОТАЕТ:
// 1. Strategy паттерн:
//    - TransformStrategy::Apply() - абстрактный метод применения трансформации
//    - MoveStrategy создает матрицу перемещения и применяет к вершинам
//    - RotateStrategy создает матрицу поворота и применяет к вершинам
//    - ScaleStrategy создает матрицу масштабирования и применяет к вершинам
// 2. Command паттерн:
//    - TransformCommand оборачивает стратегию и сохраняет состояние
//    - Execute() - выполняет трансформацию и сохраняет предыдущее состояние
//    - Undo() - восстанавливает предыдущее состояние
// 3. Model использует команды для undo/redo стека
//
// ПРЕИМУЩЕСТВА:
// - Легко добавлять новые типы трансформаций (новые стратегии)
// - Undo/redo функциональность из коробки
// - Инкапсуляция операций трансформации
// - Возможность комбинирования трансформаций
//
// Все в namespace s21
